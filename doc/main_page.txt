/**
//@mainpage notitle
//
//@section dev_manual Developer's Manual
//
//@subsection intro Introduction
//
//===========================
//
//                           Mark Davis, NSCL/FRIB
//
//  @note  This is done in text format to make it easy to do a diff on it to
//         see what changed between versions.  The reason for making all lines
//         "comment" lines is so that editors that support some simple
//         formatting on comment blocks (such as the one I use: SlickEdit) can
//         be used to edit it while maintaining line breaks, indentations, etc.
//
//
//  Acronyms:
//     - ANL:   Argonne National Laboratory
//     - FRIB:  Facility for Rare Isotope Beams
//     - IOC:   Input/Output Controller
//     - NSCL:  National Superconducting Cyclotron Laboratory
//     - FGPDB: FRIB General Purpose Digital Board
//     - LLRF:  Low Level Radio Frequency
//     - LCP:   LLRF Control Protocol
//
//  The drvFGPDB is designed to be as generic as possible and work with all
//  devices that support LCP.  While the name came from the first use of this
//  protocol, the protocol itself is also very generic and makes very few
//  assumptions about the devices that support it.
//
//  The drvFGPDB class is the heart of the driver and is derived from the
//  asynPortDriver class that is part of the popular asyn package from ANL that
//  makes writing device support modules much simpler.  Unlike the orignal
//  version of the driver for LCP devices, it is very generic and can be used
//  without changes or additions for many different devices.
//
//===================================
//
//@subsection summary_LCP Summary of LCP
//
//===================================
//
//     LCP is designed to support the reading and writing of 32-bit scalar
//     values (referred to as registers) and arrays of 8-bit values.  The
//     register values are grouped in to 3 categories: Read-Only (RO),
//     Write-Anytime (WA), and Write-Once (WO).
//
//     One or more values can be read from the controller at any time, each
//     command reading up to the # of register values in each group.  LCP also
//     supports streaming connections, where the device can send packets
//     containing register values on a periodic basis and/or when values have
//     changed.
//
//     The current value of one or more registers can be read at any time,
//     although each read command is currently limited to one or more registers
//     within a group.
//
//     Write-Anytime registers are generally used for values that represent
//     level-triggered logic:  If a value written to one of these registers is
//     the same as the last value written, the state of the controller will not
//     change (e.g. a setpoint).
//
//     Write-Once registers are generally used for values that represent
//     edge-triggered logic:  Even if the value written to one of these
//     registers is the same as the last value written, it may result in a
//     change (possibly just temporary) in the state of the controller (e.g.
//     increment a count, recalibrate, update a waveform value, etc.).
//
//     @note  At present, the driver assumes that the Write-Anytime registers
//     represents the set of values that should be saved and restored whenever
//     the controller or the IOC is restarted.  This means that, for certain
//     key values, even though they fit the general description for
//     write-anytime values, they often need to be part of the write-once group
//     instead.  The most common example is the on/off state. While having all
//     the most recent settings for a controller automatically restored after
//     it is reset can be very helpful, allowing the control system to
//     automatically turn it back on is generally NOT what we want to happen.
//
//     Of course, such decisions are entirely determined by the controller.
//     Using the on/off command as an example:  If the on/off command is part
//     of the write-once group, then the IOC will not reassert its last state
//     after a controller restart.  But unless the controller also includes an
//     interlock bit in some readable status register, then the only indication
//     that the controller turned off because it was restarted will be a
//     message in the IOC shell (and perhaps a log file), or the fact that the
//     amount of time since the controller was restarted changed to a smaller
//     value (assuming, of course, that it is included in a user interface and
//     someone actually noticed the change).
//
//     What makes more sense is to include interlock logic in the controller
//     that includes setting a bit in a readable register that indicates when
//     this has occurred, and require that a value be written to a write-once
//     register to clear the interlock.  That would make it easy to include in
//     a user interface, and it would require someone to acknowledge the cause
//     before they could turn it back on.
//
//================================================
//
//@subsection driver_organization Driver Organization
//
//================================================
//
//     The asyn layer on which the driver is based provides a generic mechanism
//     between clients that need to interact with a device (in this case EPICS
//     records) and a driver that understands how to communicate with the
//     device.  The interface between the asyn layer and such drivers consists
//     a set of parameters, each one representing either a scalar or array of
//     scalar values, and support for read and write operations on those
//     scalars.
//
//     The driver is responsible for creating the set of parameters during
//     initialization of the IOC, and then processing writes to the parameters
//     and updating the current value and state of each parameter as needed.
//     This generally requires that the driver communicates with one or more
//     devices on a frequent basis, and that it responds appropriately to any
//     problems that occur (e.g. com link problems, controller restarts, etc).
//
//     For each asyn parameter the driver creates, it also creates a
//     corresponding ParamInfo object which contains all the additional
//     information it needs to manage the state of each parameter.  This
//     information includes separate read and set values, related state
//     information, and what categories the value is part of, which determines
//     how reads and writes are processed.
//
//     The majority of the parameters are for values that are specific to a
//     particular device but are completely generic as far as the driver is
//     concerned and are handled entirely by its generic read/write logic. But
//     there are a few required values that each device must support for the
//     driver to operate.  And there are a few more that, while not critical to
//     the normal operation of the driver, provide useful diganostic
//     information and so are also included in the list of required values.
//
//==========================
//
//@subsection IOC_Init IOC Init
//
//==========================
//
//     Each record that reads from or writes to an asyn param must specify
//     which asyn layer interface to use in its DTYP field and include a
//     compatible driver definition for the param in its INP or OUT field.  If
//     more than one record references the same field, the driver definitions
//     for the param must all be the same.
//
//     For each such record, the driver's drvUserCreate() function is called
//     during IOC initialization with the contents of the record's INP/OUT
//     field.  This string is parsed and, assuming it represents a valid
//     configuration for a parameter, then a new parameter is created (or
//     updated, if a previous call provided only a partial definition).
//
//     The EPICS initHook callback feature is used to determine when all the
//     parameters have been defined and (i.e. any additional calls to
//     drvUserCreate() will be for existing parameters) and it is safe to being
//     normal processing for the paramters.
//
//     @note
//        - The drvUserCreate() fucntion is called multiple times for each
//          record during IOC init.  The reason for this is not clear, but is
//          presumably due to calls to the asyn layer during different steps in
//          the record initialization process.
//
//        - The first of the two phases in which autosave can be told to
//          restore values happens during the same PHASE that the first set of
//          calls to drvUserCreate() occur, but BEFORE the drvUserCreate()
//          calls occur.  This means that the first phase is useless, as it is
//          trying to write values to parameters that don't yet exist.
//          \n
//          BUT: Unless asyn is somehow postponing some standard processing
//          for record initialization, this seems like a basic flaw that allows
//          an attempt to write to records whose DTYP layer has not yet
//          finished initialization.  If true, it would mean that any record
//          that used DTYP to specify the driver type could have this problem.
//          \n
//        - There is currently no known way to determine what record the call
//          was for, or to get the DTYP or MTYP value for the record containing
//          the param definition.
//
//        - All the calls to drvUserCreate() are not from any thread created by
//          the driver.  But since these calls occur BEFORE the driver actually
//          starts normal processing, there is currently no need to guard
//          against concurrency issues.
//          
//
//==========================================
//
//@subsection normal_operation Normal Operation
//
//==========================================
//
//     The driver constructor currently creates a single thread that is
//     responsible for all the ongoing synchronous (polling) communication with
//     the controller. In the future, it will (optionally) create a second
//     thread to manage a separate streaming (asynchronous) connection to the
//     controller that allows the controller to send new data without being
//     asked for it each time.
//
//     Currently, the synchronous thread provides a simple scheduler that
//     periodically executes one or more run-to-completion tasks.  The interval
//     between each loop can vary depending on the outstanding tasks, allowing
//     certain higher-priority tasks to run sooner or more often as needed
//     without adversely affecting normal lower-priority tasks.  In particular,
//     write operations wake up this thread early to insure new writes are
//     processed ASAP, and unfinished reads or writes for array values are
//     processed more often than scalar reads and writes.
//
//
//<h3> Write processing: </h3>
//  
//     The driver uses the non-blocking mode option for the asyn layer.  This
//     has several advantages over using the blocking mode option:
//        - It avoids the overhead of having the asyn layer create a queue for
//          write operations and the additional thread per driver object to
//          process it.
//        - It means lengthy write operations (e.g. the current model of
//          updating the controller's firmware, which is to write the entire
//          image to a very large waveform record) do not block all other read
//          and write operations until they complete (or fail).
//
//     To avoid blocking, the write functions do not do any I/O.  Intead, they
//     save the value passed to them in the corresponding ParamInfo object,
//     change the write state to pending, wake up the driver's synchronous
//     thread, and then return.
//
//     When the synchronous thread wakes up, it processes any outstanding
//     writes ASAP.  For scalar values, this means the new value is sent right
//     away.  For array values it means it writes the next unsent block of data
//     and causes the thread to run more frequently (to minimize the time
//     needed to complete the writing of all the blocks).
//
//     @note
//        - An array write to persistent memory (PMEM values: The only type
//          supported so far) also changes the read state for the param.  This
//          causes the read value to be updated ASAP following the completion
//          (or failure) of the write operation.
//        - The configuration for array values can include a scalar status
//          parameter that is updated during the read and write operations to
//          indicate the status of operation (in percent done).
//
//<h3> Read processing: </h3>
//
//     The syncrhonous thread currently reads and processes the current values
//     of all the Read-Only and Write-Anytime registers.  In the future, this
//     functionality will be handled by the asynchronous thread that will
//     handle streaming connections (with the synchronous thread doing it only
//     if there are no active streaming connections providing this data).
//
//     Each value in a read response is compared to the last processed value,
//     and if it is different, the new value is posted (written to the asyn
//     layer and callbacks processed for all new values) and the state of the
//     corresponding ParamInfo object is updated.
//
//<h3> Driver-only values: </h3>
//
//     Parameters can also be defined for driver values that do not represent
//     LCP registers.  In most cases, this is done to provide easy ad flexible
//     access to read-only values updated by the driver for diagnostic
//     purposes.  Allowing such values to be accessed via EPICS records means
//     we can leverage the power of all the tools that can be used with EPICS
//     PVs to monitor these values, their behavior over time, and any
//     relationships between them.
//
//==================================
//
//@subsection write_access Write Access
//
//==================================
//
//     The LCP protocol allows multiple clients to read data from the same
//     device concurrently, but only one client to have write access at any
//     time.
//
//     To gain write access, a client must successfully write a valid number to
//     the sessionID register.  If another client currently has write access,
//     then all such attempts by other clients will fail.
//
//     Once granted, write access is valid for 10 seconds from the time of the
//     client's last successful write operation.  This insures that if the
//     client with the write access becomes idle it does not disable the
//     ability of another client to get write access.
//
//     This also means that, to keep write access, a client must perform a
//     successful write operation at least once every 10 seconds.  At present,
//     the driver keeps track of the last time it did a successful write
//     operation and insures that it does so at least once every 2 seconds.
//
//=========================================
//
//@subsection ctlr_restart Controller Restarts
//
//=========================================
//
//     There are two values that the driver uses to detect when a controller
//     has been restarted:  The sessionID and the upSecs counter.
//
//     The sessionID is reset to 0 whenever the controller restarts, and is set
//     to a random non-0 value by the last client that had write access.  The
//     sessionID is included in every packet the controller sends, so once it
//     has been set to a non-0 value, the first packet received by a client
//     with a different value indicates that the controller has been reset.
//
//     One of the required read-only register values (upSecs) is also set to 0
//     whenever the controller restarts, and is incremented each second after
//     that.  The driver gets updates to this value on a regular basis, so if
//     the value decreased since the last update, the driver knows that the
//     controller restarted sometime after it last read the value.
//
//     The sessionID was designed to allow the client to know immediately if it
//     should process a packet it just received.  If the only indication of a
//     controller restart was the upSecs value getting smaller, the client
//     would not discover the problem until it next read the upSecs register.
//
//     But the sessionID approach is not perfect either.  It is always possible
//     that another client could get write access right after the controller
//     restarted and write the same sessionID value it was using just before
//     the restart.  This may seem very unlikely, but if a another client is
//     reading values from the controller, then the sessionID is likely one of
//     the values it is keeping track of, and if it were to attempt to get
//     write access just after the controller restarted, then it would not only
//     succeed, but it might very well use the existing sessionID value to do
//     so.
//
//     If that occurred, the client that had write access before the restart
//     would not see any change in the sessionID so it would not know that the
//     controller had just restarted and it would continue processing packets.
//     And if it relied ONLY on a change in the sessionID, it would go right on
//     processing responses from the controller and the only indication there
//     was a problem would be that any attempts to write new values to the
//     controller would fail.
//
//     @note 
       Assuming we ignore an deliberate attempt to circumvent the
//     expected behavior, this scenario could be handled by requiring the
//     controller to track which client last had write access and reject any
//     attempt by another client to get write access using the same
//     sessionID.
//
//     Even if all we do with the knowledge that the controller restarted is to
//     log the incident, that is a very important piece of information to have
//     when diagnosing trouble reports.  Using both of these methods not only
//     means we virtually eliminate the chance that a restart could go
//     unnoticed for any length of time, but it means we have comformation as
//     to WHEN the controller was restarted (upSecs ago!)
//
//=====================================================
//
//@subsection communication_problem Communication Problems
//
//=====================================================
//
//     While the sessionID and upSecs values provide the means to determine if
//     the controller restarted, they are of no use unless the IOC is actively
//     communicating with the controller.  If the communication link fails for
//     whatever reason, we won't know whether or not the controller restarted
//     until communication is re-established.
//
//     To detect when there is a persistent problem with the communications
//     link, the driver keeps track of the last time it got a valid response
//     from the controller and periodically checks how long ago that was.  If
//     it has ben too long, then the driver considers the controller to be
//     offline (not connected).
//
//     The driver reacts to this by updating the state of all the paramInfo
//     objects and the associated asyn params to indicate that there is a
//     communication problem.  Normal communication with the controller is
//     considered to be restored once the read state of all the Read-Only and
//     Write-Anytime registers indicate the values are current again.
//
//     At present, the set state of all parameters that have been written to
//     since the IOC restarted are also changed to pending so the values will
//     be resent once normal communication is restored.  Recent discussion of
//     the pros/cons to this behavior means it may be changed so this will only
//     be done if the upSecs value indicates the controller was actually
//     restarted.
//
//
*/