/**
//@mainpage notitle
//
//@section dev_manual Developer's Manual
//
//@subsection intro Introduction
//
//===========================
//
//                           Mark Davis, NSCL/FRIB
//
//  @note  This is done in text format to make it easy to do a diff on it to
//         see what changed between versions.  The reason for making all lines
//         "comment" lines is so that editors that support some simple
//         formatting on comment blocks (such as the one I use: SlickEdit) can
//         be used to edit it while maintaining line breaks, indentations, etc.
//
//
//  Acronyms:
//     - ANL:   Argonne National Laboratory
//     - FRIB:  Facility for Rare Isotope Beams
//     - IOC:   Input/Output Controller
//     - NSCL:  National Superconducting Cyclotron Laboratory
//     - FGPDB: FRIB General Purpose Digital Board
//     - LLRF:  Low Level Radio Frequency
//     - LCP:   LLRF Control Protocol
//
//  The drvFGPDB is designed to be as generic as possible and work with all
//  devices that support LCP.  While the name came from the first use of this
//  protocol, the protocol itself is also very generic and makes very few
//  assumptions about the devices that support it.
//
//  The drvFGPDB class is the heart of the driver and is derived from the
//  asynPortDriver class that is part of the popular asyn package from ANL that
//  makes writing device support modules much simpler.  Unlike the orignal
//  version of the driver for LCP devices, it is very generic and can be used
//  without changes or additions for many different devices.
//
//===================================
//
//@subsection summary_LCP Summary of LCP
//
//===================================
//
//     LCP is designed to support the reading and writing of 32-bit scalar
//     values (referred to as registers) and arrays of 8-bit values.  The
//     register values are grouped in to 3 categories: Read-Only (RO),
//     Write-Anytime (WA), and Write-Once (WO).
//
//     One or more values can be read from the controller at any time, each
//     command reading up to the # of register values in each group.  LCP also
//     supports streaming connections, where the device can send packets
//     containing register values on a periodic basis and/or when values have
//     changed.
//
//     The current value of one or more registers can be read or written to at
//     any time, although each command is currently limited to a range of
//     register numbers within a group.
//
//     Write-Anytime registers are generally used for values that represent
//     level-triggered logic:  If a value written to one of these registers is
//     the same as the last value written, the state of the controller will not
//     change (e.g. a setpoint).
//
//     Write-Once registers are generally used for values that represent
//     edge-triggered logic:  Even if the value written to one of these
//     registers is the same as the last value written, it generally triggers
//     some processing and/or results in a change (possibly just temporary) in
//     the state of the controller (e.g. increment a count, recalibrate, update
//     a waveform value, etc.).
//
//     @note
//       At present, the driver assumes that the Write-Anytime registers
//       represents the set of values that are saved and restored by autosave
//       whenever the the IOC is restarted and (if configured to do so)
//       restored to the controller whenever it restarts.  This means that, for
//       certain key values, even though they fit the general description for
//       write-anytime values, they often need to be part of the write-once
//       group instead.  The most common example is the on/off state.  While
//       having all the most recent settings for a controller automatically
//       restored after it is reset can be very helpful, allowing the control
//       system to automatically turn it back on is generally NOT what we want
//       to happen.
//
//     Of course, such decisions are entirely determined by the controller.
//     Using the on/off command as an example:  If the on/off command is part
//     of the write-once group, then the IOC will not reassert its last state
//     after a controller restart.  But unless the controller also includes an
//     interlock bit in some readable status register, then the only indication
//     that the controller turned off because it was restarted will be a
//     message in the IOC shell (and perhaps a log file), or the fact that the
//     amount of time since the controller was restarted changed to a smaller
//     value (assuming, of course, that this value is included in a user
//     interface and someone actually noticed the change).
//
//     What makes more sense is to include interlock logic in the controller
//     that includes setting a bit in a readable register to indicate when this
//     has occurred, and require that a value be written to a write-once
//     register to clear the interlock.  That would make it easy to include in
//     a user interface, and it would require someone to acknowledge the cause
//     before they could turn it back on.
//
//================================================
//
//@subsection driver_organization Driver Organization
//
//================================================
//
//     The asyn layer on which the driver is based provides a generic mechanism
//     between clients that need to interact with a device (in this case EPICS
//     records) and a driver that understands how to communicate with the
//     device.  The interface between the asyn layer and such drivers consists
//     of a set of parameters, each one representing either a scalar or array
//     of scalar values, and support for read and write operations on those
//     scalars.
//
//     The driver is responsible for creating the set of parameters during
//     initialization of the IOC, and then processing writes to the parameters
//     and updating the current value and state of each parameter as needed.
//     This generally requires that the driver communicates with one or more
//     devices on a frequent basis, and that it responds appropriately to any
//     problems that occur (e.g. com link problems, controller restarts, etc).
//
//     For each asyn parameter the driver creates, it also creates a
//     corresponding ParamInfo object which contains all the additional
//     information it needs to manage the state of each parameter.  This
//     information includes separate read and set values, related state
//     information, and what categories the value is part of, which determines
//     how reads and writes are processed.
//
//     The majority of the parameters are for values that are specific to a
//     particular device but are completely generic as far as the driver is
//     concerned and are handled entirely by its generic read/write logic. But
//     there are a few required values that each device must support for the
//     driver to operate.  And there are a few more that, while not critical to
//     the normal operation of the driver, provide useful diganostic
//     information and so are also included in the list of required values.
//
//==========================
//
//@subsection driver_Init Driver Initialization
//
//==========================
//
//     Each record that reads from or writes to an asyn param must specify
//     which of asyn's devEpics interfaces to use in its DTYP field and include
//     a compatible driver definition for the param in its INP or OUT field.
//     If more than one record references the same field, the driver
//     definitions for the param must all be the same.
//
//     For each such record, the driver's drvUserCreate() function is called
//     during IOC initialization with the contents of the record's INP/OUT
//     field.  This string is parsed and, assuming it represents a valid
//     configuration for a parameter, then a new parameter is created (or
//     updated, if a previous call provided only a partial definition).
//
//     The EPICS initHook callback feature is used to determine when all the
//     parameters have been defined (i.e. any additional calls to
//     drvUserCreate() will be for existing, fully defined parameters) and it
//     is safe to begin normal processing for the paramters.
//
//     @note
//        - The drvUserCreate() function is called multiple times for each
//          record during IOC init.  The reason for this is not clear, but is
//          presumably due to calls to the asyn layer during different steps in
//          the record initialization process.
//
//        - The driver assumes that the latest settings for most of the
//          write-anytime registers (and the driver-only ctlrUpSince value) is
//          automatically saved and restored across IOC restarts (using
//          autosave or some equivalent).  This allows the IOC to restore the
//          settings to the controller if needed, and minimizes the effect of
//          an IOC reboot.
//
//        - The first of the two phases in which autosave can be told to
//          restore values happens during the same PHASE that the first set of
//          calls to drvUserCreate() occur, but BEFORE the drvUserCreate()
//          calls occur.  This means that the first phase is useless, as it is
//          trying to write values to parameters that don't yet exist.
//          \n
//          BUT: Unless asyn is somehow postponing some standard processing
//          for record initialization, this seems like a basic flaw that allows
//          an attempt to write to records whose DTYP layer has not yet
//          finished initialization.  If true, it would mean that any record
//          that used DTYP to specify the driver type could have this problem.
//          \n
//        - There is currently no known way to determine what record the call
//          was for, or to get the DTYP or MTYP value for the record containing
//          the param definition.  And doing so would violate the asyn model
//          where all such client-specific knowledge is hidden by the core asyn
//          layer.
//
//        - None of the calls to drvUserCreate() are from threads created by
//          the driver.  But since these calls occur BEFORE the driver actually
//          starts normal processing, there is currently no need to guard
//          against concurrency issues.
//
//
//==========================================
//
//@subsection normal_operation Normal Operation
//
//==========================================
//
//     The driver constructor currently creates a timer queue and several
//     eventTimer objects (which is based on the epicsTimer interface).  Each
//     of these timer objects is responsible for one of the following runtime
//     processing tasks:
//        - Obtaining and keeping write access
//        - Reading the latest scalar values from the controller
//        - Sending new settings for scalar values to the controller
//        - Reading the latest array values from the controller
//        - Sending new array values to the controller
//        - Posting any changes to values read from the controller
//        - Checking on the state of the connection to the controller
//
//     Each of these timers has a callback function associated with it and a
//     default interval for how much time should pass between each callback.
//     The callbacks are all done by a thread that is created along with the
//     queue to manage the timers, so the callback for only 1 timer is ever
//     active at any time.  For each callback, the driver checks and logs an
//     error if the callback functions are invoked by more than one thread.
//
//     The time remaining until the next callback is performed for a timer can
//     be changed by any thread, which means the relative priority of each
//     processing task can be changed on the fly.  This is used either to cause
//     one of the above processes to occur sooner than it normally would (e.g.
//     to cause a new setpoint to be sent to the controller ASAP), or to delay
//     the next callback for some periodic operation (currently used to avoid
//     having the write access callback send another keep-alive write packet
//     that is not needed because another write operation just occurred).
//
//     Although this feature is very useful, it has one main drawback:  If the
//     callback function for the affected timer is currently running, then the
//     thread that requested the change will block until the callback function
//     completes.  This means (e.g.) that using this feature in the driver's
//     writeXxx() functions (to avoid delays in processing a new setpoint) can
//     cause the thread that called the writeXxx() function to block.  For this
//     reason (and others), the driver now uses the ASYN_CANBLOCK flag to avoid
//     blocking processing unrelated to the associated controller.
//
//     @note
//        The callback functions themselves return a value that determines
//        whether or not another callback will occur and how soon.  The usual
//        return value tells the timer logic to use the default interval for
//        the timer between callbacks (specified in the constructor call), but
//        it can specify a different value or even cause the timer to become
//        idle (no more callbacks unless/until the timer is reactivated).
//
//     In the future, the driver will (optionally) create a second thread to
//     manage a separate streaming (asynchronous) connection to the controller
//     that allows the controller to send new data without being asked for it
//     each time.
//
//
//<h3> Write processing: </h3>
//
//     Although the driver now uses the ASYN_CANBLOCK feature that tells the
//     asyn layer it may block when called (as described above for the timer
//     event-driven logic), the driver currently doesn't attempt to send or
//     read data from the controller during a read or write call.  This may or
//     may not change (there are pros/cons to doing so), but even if it does,
//     the driver must still include the existing functionality to be able to
//     continue to handle controller restarts and communication problems
//     gracefully and to avoid blocking all scalar processing during lengthy
//     array read and write operations.
//
//     This means that the write functions save the value passed to them in the
//     corresponding ParamInfo object, change the write state to Pending, wake
//     up the timer responsible for sending new settings, and then return.
//
//     This causes the callback for the timer to execute ASAP, which then
//     attempts to process any outstanding writes. For scalar values, this
//     means the new value is sent right away.  For array values it means it
//     writes the next unsent block of data and causes the timer callback to
//     repeat using either the normal short interval (if there is still more to
//     be written) or a longer interval (when we are waiting for a new setting
//     for an array value).
//
//     @note
//        - When the write operation for a persistent memory array (PMEM
//          values: The only type supported so far) finishes (or fails), the
//          read state for the param is changed to trigger reading back the new
//          value that in persistent memory.  At present, the driver does not
//          try to compare this to what was written, although this could be
//          added in the future.
//        - The configuration for array values can include a scalar status
//          parameter that is updated during the read and write operations to
//          indicate the status of the operation (in percent done).
//
//<h3> Read processing: </h3>
//
//     The read scalar timer callback periodically reads the current values of
//     all the LCP registers and then wakes up the timer that posts any
//     changes.
//
//     The read array timer callback reads the current state of any array
//     values that need to be (re)read using a short interval between reading
//     each block, then uses a relatively long delay until something wakes itup
//     to begin a new read.  After completion of each array readback, this
//     timer wakes up the one that posts the just-read value (the driver does
//     not currently attempt to detect if the value of an array changed since
//     it last posted it, although this could be done efficiently using a hash
//     tag.
//
//<h3> Driver-only values: </h3>
//
//     Parameters can also be defined for driver values that do not represent
//     LCP registers.  This is done to provide easy and flexible access to
//     values within the driver, leveraging the capabilities of the same tools
//     that allow access to the register values.  To insure consistency and
//     avoid the need to add special-case code to handle these values
//     differently than any other values in the driver, reading from and
//     writing to these values are handled by the same timer callbacks that
//     manage the LCP register values, which means adding new values is as
//     simple as adding another line to list of existing values.
//
//=========================================
//
//@subsection ctlr_restart Controller Restarts
//
//=========================================
//
//     One of the register values that each controller is required to support
//     is the upSecs counter, which is reset to 0 whenever the controller is
//     restarted and is incremented by one for each second the controller is
//     running.  The driver uses this value to determine if/when the controller
//     was restarted, and to keep track of the date/time it was last known to
//     have restarted.
//
//     When the driver detects that the controller has restarted, it logs the
//     event and, if configured to do so, resends all the settings for the
//     write-anytime registers it has gotten since the IOC restarted (including
//     ones restored during IOC initialization).  This insures that the
//     controller is using the last known settings from before it was
//     restarted, avoiding the need to manually reapply all the settings and
//     some possibly nasty surprises because someone turned it back on without
//     noticing that the readbacks ahd reverted to default settings.
//
//     Although changes in the upSecs value alone is sufficient to detect
//     controller restarts that occur while the driver is running, doing so
//     across IOC restarts requires more:  The last known upSecs value is
//     useless unless we know the date/time it is relative to.  For this
//     reason, the driver tracks the date/time the controller was last known to
//     have restarted in a read/write parameter named ctlrUpSince (set to:
//     curTime - upSecs).
//
//     Along with most of the write-anytime register values, the driver expects
//     this value to be automatically saved and restored across IOC restarts so
//     it can use it to determine if the controller was restarted since that
//     time. Note that it has to be a writable parameter so it can be restored
//     during IOC startup, but it should NOT allow writing except by the IOC
//     shell.
//
//     @note
//        The ctlrUpSince value and its usage currently does not take in to
//        account whether or not there are Pending writes.  Although it is a
//        low probability, restarting the IOC (but not the controller) when
//        there are Pending writes means the ctlrUpSince value will not change,
//        so any settings that were Pending before the IOC restart will not be
//        sent until the next time the controller restarts.
//
//==================================
//
//@subsection write_access Write Access and Sessions
//
//==================================
//
//     The LCP protocol allows multiple clients to read data from the same
//     device concurrently, but only one client to have write access at any
//     time.
//
//     To gain write access, a client must successfully write a valid number to
//     the sessionID register.  If another client currently has write access,
//     then all such attempts by other clients will fail.
//
//     Once granted, write access is valid for 10 seconds from the time of the
//     client's last successful write operation.  This insures that if the
//     client with the write access becomes idle it does not disable the
//     ability of another client to get write access.
//
//     @note
//       The controller identifies a client by its IP address and the UDP port
//       used to send packets to the controller.  Since the UDP port # will
//       generally be different each time the IOC connects to the controller,
//       restarting the IOC means it will appear to be a different client.
//
//     This also means that, to keep write access, a client must perform a
//     successful write operation at least once every 10 seconds.  At present,
//     the driver keeps track of the last time it did a successful write
//     operation and insures that it does so at least once every 2 seconds.
//
//     Although the existence of the sessionID makes the logic for managing
//     write access simpler, the primary reason it was introduced was to
//     provide a way to detect that the state of the controller changed BEFORE
//     processing affected packets.
//
//     Unlike the upSecs register, the sessionID value is included in every
//     packet the controller sends and the only time it changes should be when
//     the driver changes it.  Any other change indicates that the controller
//     restarted or that another client somehow got the write access.
//
//     What this means is that, for each packet the driver receives, it can
//     determine BEFORE processing any data in the packet whether or not the
//     state of the controller changed.
//
//     While potentially useful for synchronous (polling style) communication,
//     it is most useful for the asynchronous (streaming) connections where it
//     is possible to receive an old packet from a previous "session" that may
//     contain outdated information (i.e. from before the sessionID was changed
//     or the controller restarted).  In such cases, the sessionID in the
//     packet will will be different than the value most recently written by
//     the driver, so the driver can discard the packet rather than risk
//     processing outdated values.
//
//
//=====================================================
//
//@subsection communication_problem Communication Problems
//
//=====================================================
//
//     While the sessionID and upSecs values provide the means to determine if
//     the controller restarted, they are of no use unless the IOC is actively
//     communicating with the controller.  If the communication link fails for
//     whatever reason, we won't know whether or not the controller restarted
//     until communication is re-established.
//
//     To detect when there is a persistent problem with the communications
//     link, the driver keeps track of the last time it got a valid response
//     from the controller and periodically checks how long ago that was.  If
//     it has been too long, then the driver considers the controller to be
//     offline (not connected).  When this occurs, the driver changes the
//     status of all the parameters to indicate the problem.
//
//     During IOC initialization the driver must accept writes because that is
//     when settings are restored.  But after that, it rejects write operations
//     whenever the controller is offline.  The reasoning for this is that we
//     have no idea why the controller is offline or how long it will remain
//     offline and we don't want to apply what could be very old settings by
//     the time it comes back online.
//
//     The other option (used by the older driver) would be to always accept
//     new settings but then discard them if they get too old (although the
//     older driver would then change the settings to match the readings,
//     whereas we might want to store the last value that was successfully sent
//     and revert to that).
//
//     Once normal communication is restored, if the driver discovers that the
//     controller restarted, and it is configured to do so, it will resend all
//     the settings (see the "Controller Restarts" section).
//
**/
